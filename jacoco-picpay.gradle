if (project.hasProperty("jacocoUnitTestEnabled")) {
    apply plugin: 'jacoco'

    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }
}

task jacocoCoverageReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for the debug build"

    reports {
        html.enabled = true
        xml.enabled = true
    }

    def fileFilter = [
            // Android
            'android/**/*.*',
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            //ButterKnife
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            //ButterKnife Gradle Plugin
            '**/R2.class',
            '**/R2$*.class',
            // ButterKnife generated code
            '**/*_ViewBinding*.*',
            // Data Binding
            '**/BR$*.class',
            '**/BR.class',
            '**/DataBinderMapperImpl.*',
            '**/DataBinderMapperImpl*.*',
            '**/databinding/**',
            '**/*BindingImpl.class',
            // DeepLinkDispatcher
            '**/AppLinkModuleLoader.class',
            '**/DeepLinkDelegate.class',
            // Epoxy
            '**/*_.class',
            '**/*ModelBuilder.class',
            '**/*RowBuilder.class',
            '**/EpoxyModelKotlinExtensions.class',
            '**/*_EpoxyHelper.class',
            // Glide
            '**/GlideApp.class',
            '**/GlideOptions.class',
            '**/GlideRequest.class',
            '**/GlideRequests.class',
            '**/GeneratedAppGlideModuleImpl.class',
            '**/GeneratedRequestManagerFactory.class',
            // Navigation Arch Components
            '**/*FragmentArgs.class',
            '**/*FragmentDirections.class',
            // Kotlin
            '**/*Module*.*',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*_MembersInjector.class',
            '**/*MembersInjector*.*',
            '**/*$$*',
            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
            '**/*Lambda*.*',
            '**/*$inlined$*.*', // Kotlin specific, Jacoco can not handle several "$" in class name.
            '**/*inlined*.*',
            '**/request/**',
            '**/response/**',
            '**/model/*Response.kt',
            '**/model/*Request.kt',
            "**/*Service.kt",
            '**/model/*Throwable.kt',
            '**/model/*Data.kt',
            '**/*BitmapExtensionsKt*.*'
    ]

    def unitTestsData = fileTree(dir: "$buildDir", include: 'jacoco/testDebugUnitTest.exec')
    def instrumentedTestsData = fileTree(dir: "$buildDir", include: 'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec')

    if (project.hasProperty("jacocoInstrumentedTestEnabled")) {
        executionData.from files([unitTestsData, instrumentedTestsData])
    } else {
        fileFilter.addAll([
                '**/*Fragment*.*',
                '**/*Adapter*.*',
                '**/*ViewHolder*.*',
                '**/*Activity*.*'
        ])
        executionData.from files([unitTestsData])
    }

    final mainSrc = "src/main/java"
    final kotlinTree = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    final javacTree = fileTree(dir: "$buildDir/intermediates/javac/debug", excludes: fileFilter)

    sourceDirectories.setFrom files([mainSrc])
    classDirectories.setFrom files([javacTree, kotlinTree])
}

jacocoCoverageReport.doLast {
    println "Coverage report finished"
    println "See report in: file://$buildDir/reports/jacoco/jacocoCoverageReport/html/index.html"
}